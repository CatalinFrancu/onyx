#include "Card.h"

#include "Str.h"
#include <iomanip>
#include <sstream>

const int Card::DATA[NUM_CARDS + 1][NUM_COLORS + 2] = {
  // red_cost, green_cost, blue_cost, white_cost, black_cost, bonus_color, points
  { /* cards are indexed from 1 */ },
  { 0, 0, 0, 3, 0, 0, 0 },
  { 3, 0, 0, 0, 0, 1, 0 },
  { 0, 0, 0, 0, 3, 2, 0 },
  { 0, 0, 3, 0, 0, 3, 0 },
  { 0, 3, 0, 0, 0, 4, 0 },
  { 0, 1, 2, 0, 0, 0, 0 },
  { 0, 0, 1, 2, 0, 1, 0 },
  { 0, 0, 0, 1, 2, 2, 0 },
  { 2, 0, 0, 0, 1, 3, 0 },
  { 1, 2, 0, 0, 0, 4, 0 },
  { 0, 0, 0, 4, 0, 0, 1 },
  { 0, 0, 0, 0, 4, 1, 1 },
  { 4, 0, 0, 0, 0, 2, 1 },
  { 0, 4, 0, 0, 0, 3, 1 },
  { 0, 0, 4, 0, 0, 4, 1 },
  { 2, 0, 0, 2, 0, 0, 0 },
  { 2, 0, 2, 0, 0, 1, 0 },
  { 0, 2, 0, 0, 2, 2, 0 },
  { 0, 0, 2, 0, 2, 3, 0 },
  { 0, 2, 0, 2, 0, 4, 0 },
  { 0, 1, 1, 1, 1, 0, 0 },
  { 1, 0, 1, 1, 1, 1, 0 },
  { 1, 1, 0, 1, 1, 2, 0 },
  { 1, 1, 1, 0, 1, 3, 0 },
  { 1, 1, 1, 1, 0, 4, 0 },
  { 0, 1, 1, 2, 1, 0, 0 },
  { 1, 0, 1, 1, 2, 1, 0 },
  { 2, 1, 0, 1, 1, 2, 0 },
  { 1, 2, 1, 0, 1, 3, 0 },
  { 1, 1, 2, 1, 0, 4, 0 },
  { 0, 1, 0, 2, 2, 0, 0 },
  { 2, 0, 1, 0, 2, 1, 0 },
  { 2, 2, 0, 1, 0, 2, 0 },
  { 0, 2, 2, 0, 1, 3, 0 },
  { 1, 0, 2, 2, 0, 4, 0 },
  { 1, 0, 0, 1, 3, 0, 0 },
  { 0, 1, 3, 1, 0, 1, 0 },
  { 1, 3, 1, 0, 0, 2, 0 },
  { 0, 0, 1, 3, 1, 3, 0 },
  { 3, 1, 0, 0, 1, 4, 0 },
  { 0, 0, 0, 0, 5, 0, 2 },
  { 0, 5, 0, 0, 0, 1, 2 },
  { 0, 0, 5, 0, 0, 2, 2 },
  { 5, 0, 0, 0, 0, 3, 2 },
  { 0, 0, 0, 5, 0, 4, 2 },
  { 6, 0, 0, 0, 0, 0, 3 },
  { 0, 6, 0, 0, 0, 1, 3 },
  { 0, 0, 6, 0, 0, 2, 3 },
  { 0, 0, 0, 6, 0, 3, 3 },
  { 0, 0, 0, 0, 6, 4, 3 },
  { 0, 0, 0, 3, 5, 0, 2 },
  { 0, 3, 5, 0, 0, 1, 2 },
  { 0, 0, 3, 5, 0, 2, 2 },
  { 5, 0, 0, 0, 3, 3, 2 },
  { 3, 5, 0, 0, 0, 4, 2 },
  { 0, 2, 4, 1, 0, 0, 2 },
  { 0, 0, 2, 4, 1, 1, 2 },
  { 1, 0, 0, 2, 4, 2, 2 },
  { 4, 1, 0, 0, 2, 3, 2 },
  { 2, 4, 1, 0, 0, 4, 2 },
  { 2, 0, 0, 2, 3, 0, 1 },
  { 0, 0, 3, 2, 2, 1, 1 },
  { 3, 2, 2, 0, 0, 2, 1 },
  { 2, 3, 0, 0, 2, 3, 1 },
  { 0, 2, 2, 3, 0, 4, 1 },
  { 2, 0, 3, 0, 3, 0, 1 },
  { 3, 2, 0, 3, 0, 1, 1 },
  { 0, 3, 2, 0, 3, 2, 1 },
  { 3, 0, 3, 2, 0, 3, 1 },
  { 0, 3, 0, 3, 2, 4, 1 },
  { 0, 7, 0, 0, 0, 0, 4 },
  { 0, 0, 7, 0, 0, 1, 4 },
  { 0, 0, 0, 7, 0, 2, 4 },
  { 0, 0, 0, 0, 7, 3, 4 },
  { 7, 0, 0, 0, 0, 4, 4 },
  { 3, 7, 0, 0, 0, 0, 5 },
  { 0, 3, 7, 0, 0, 1, 5 },
  { 0, 0, 3, 7, 0, 2, 5 },
  { 0, 0, 0, 3, 7, 3, 5 },
  { 7, 0, 0, 0, 3, 4, 5 },
  { 3, 6, 3, 0, 0, 0, 4 },
  { 0, 3, 6, 3, 0, 1, 4 },
  { 0, 0, 3, 6, 3, 2, 4 },
  { 3, 0, 0, 3, 6, 3, 4 },
  { 6, 3, 0, 0, 3, 4, 4 },
  { 0, 3, 5, 3, 3, 0, 3 },
  { 3, 0, 3, 5, 3, 1, 3 },
  { 3, 3, 0, 3, 5, 2, 3 },
  { 5, 3, 3, 0, 3, 3, 3 },
  { 3, 5, 3, 3, 0, 4, 3 },
};

Card Card::cards[NUM_CARDS + 1];

Card& Card::get(int id) {
  return cards[id];
}

void Card::createAll() {
  for (int id = 1; id <= NUM_CARDS; id++) {
    const int* d = DATA[id];
    Card& card = cards[id];
    card.id = id;
    card.cost.fromArray(d);
    card.color = d[NUM_COLORS];
    card.points = d[NUM_COLORS + 1];
    card.computeLevel();
  }
}

void Card::computeLevel() {
  level = 1;
  while (id > MAX_ID_PER_LEVEL[level]) {
    level++;
  }
}

std::string Card::toString() {
  std::stringstream ss;
  ss << "[#" << std::setw(2) << id << "]";
  ss << "    " << points;
  ss << "      " << Str::cards(color, 1);;
  ss << "    " << cost.toString();

  return ss.str();
}
